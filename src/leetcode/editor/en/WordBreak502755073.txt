    class Solution {
        // 广度优先搜索
/*
        public boolean wordBreak(String s, List<String> wordDict) {
            LinkedList<Integer> indexQueue = new LinkedList<>();
            Set<String> wordSet = new HashSet<>(wordDict);
            boolean[] visited = new boolean[s.length()];
            indexQueue.add(0);
            while (!indexQueue.isEmpty()) {
                Integer start = indexQueue.pop();
                if (visited[start]) {
                    continue;
                }
                for (int end = start + 1; end <= s.length(); end++) {
                    if (wordSet.contains(s.substring(start, end))) {
                        if (s.length() == end) {
                            return true;
                        } else {
                            indexQueue.add(end);
                        }
                    }
                }
                visited[start] = true;
            }
            return false;
        }
*/
        public boolean wordBreak(String s, List<String> wordDict) {
            Set<String> wordSet = new HashSet<>(wordDict);
            boolean[] dp = new boolean[s.length() + 1];
            dp[0] = true;
            for (int i = 1; i < dp.length; i++) {
                for (int j = 0; j < i; j++) {
                    if (!dp[j]) {
                        dp[j] = wordSet.contains(s.substring(0, j));
                    }
                    if (dp[j] && wordSet.contains(s.substring(j, i))) {
                        dp[i] = true;
                        break;
                    }
                }
            }
            return dp[s.length()];
        }
    }

//runtime:8 ms
//memory:39.8 MB
